[
{
  "model": "articles.article",
  "pk": 1,
  "fields": {
    "registration_time": "2022-07-12T13:08:03Z",
    "slug": "nativnyj-marketingovyj-instrument-app-store-i-google-play-ili-kak-rasskazat-ob-apdejte-pryamo-na-stranice-prilozheniya",
    "is_active": false,
    "title": "Нативный маркетинговый инструмент App Store и Google Play или Как рассказать об апдейте прямо на странице приложения",
    "body": "Лайв-опсами можно назвать любые апдейты и ивенты в приложении. Раньше в App Store и Google Play не было нативных маркетинговых инструментов для их продвижения, затем появились лайв-опс карточки. Они могут в сторе познакомить пользователя с игровыми ивентами, и ему даже апдейт качать не придется.   Звучит просто, но, как всегда, есть море подводных камней и не самый очевидный процесс создания этих карточек. В статье разберемся, какие материалы нужно подготовить отделу маркетинга, и что сделать в проекте, чтобы успешно пройти проверку сторов.  Лайв-опс карточки — удовольствие не для всех разработчиков. Чтобы получить к ним доступ, нужно не только поддерживать постоянный контакт с биздевами App Store и Google Play, но и быть для них интересными. Таким образом площадки ограничивают поток заявок.  Понятных гайдов по созданию карточек в App Store и Google Play до сих пор не много. В свое время мы многое изучали методом тыка или общением с саппортом магазинов. Обычно по официальным гайдлайнам все становится понятно, но на деле и простые поля вызывают сложности — ревьюеры могут задавать дополнительные вопросы и отклонять заявки по разным причинам.  Например, мы получали реджекты из-за неподходящих текстов или недостаточно подробного описания ивента. Приходилось расписывать по пунктам, сколько пушек добавили, какие скины/аватары/игровые режимы будут доступны и так далее. Текстовые поля мелкие (от 30 до 120 символов), поэтому уместить в них и описание и ключи для индексации не так просто.   Пришлось некоторое время разбираться и привыкать, зато теперь процесс понятен. Дальше расскажу шаги отдельно по каждому стору: какие параметры необходимо заполнять, и что за что отвечает.  Что нужно для создания лайв-опс карточки Стоит заранее подготовить:  1. Сам ивент. Он должен быть целиком продуман со стороны продукта и находиться на стадии активного вливания в следующий апдейт. Им может стать, например, временное хэллоуинское событие с уникальным режимом.  2. Маркетинговые материалы:  Графические баннеры разных разрешений и соотношений (об этом ниже).  Тексты: названия, заголовки, описание контента на разных языках с ключами для индексации.  Прямая ссылка на событие (в случае App Store).  Видео (при необходимости и наличии ресурсов).  3. Возможность публиковать лайв-опс карточки. Для этого нужно иметь контакты с менеджерами сторов и представлять для них интерес — тогда в кабинете разработчика появится нужная опция.  Все пункты выполнены? Переходим к созданию карточки.  Создание карточки в Google Play На Android эта фича называется Google Play LiveOps. Чтобы создать лайв-опс карточку, нужно в личном кабинете разработчика по очереди заполнить все поля.   1. Название события. Неиндексирующееся на предмет ключевых слов поле, которое не увидит пользователь. В 80 символов можно уместить все, что захочется, хоть «Best Event Ever» — почему нет?  2. Тип события. Первое по-настоящему важное поле. Гайдлайн Google Play насчитывает 5 вариантов ивентов на выбор разработчика:  Специальное предложение — скидки и бесплатные товары. Например, акция, приуроченная к Хэллоуину или Китайскому Новому году.  Главное условие для выбора этого типа: вы должны предоставить скидку и эксклюзивный бесплатный контент. Специальные предложения, как правило, либо ограничены по времени (до 28 дней), либо бессрочны, если нацелены на определенные типы пользователей. Акции могут распространяться на цифровые и физические товары/услуги или выгодные предложения в виде эксклюзивного бесплатного контента.  Событие — внутриигровые ивенты с ограничением по времени. Например, командные соревнования, турниры, PvP и подобные штуки.  Выбирайте этот тип, если в рамках вашего события не будет бесплатного эксклюзивного контента или скидок.  Крупное обновление — когда вы подготовили очень много контента. В случае Pixel Gun 3D это, например, новые игровые режимы, оружие, скины или карты со сторилайном. В общем, не из разряда bug fixes, а что-то свежее и интересное для пользователя.  Но есть ограничение: максимальное время показа карточек такого типа — неделя. Поэтому если между релизами проходит много времени (обычно около месяца), а продвигаться в сторе хочется дольше, то ловите небольшой лайфхак.  Google позволяет скопировать содержимое уже отработавшей карточки в новую. Можно повторно запустить точно такое же событие еще на неделю, а потом еще и еще. Только сами не запутайтесь.  Кроссовер — игровые коллаборации и ивенты, проводимые совместно с другими компаниями. Здесь и добавить нечего.  Обновление предварительной регистрации — особый тип события, который актуален для проектов в стадии предварительной регистрации. Как правило, они доступны ограниченному кругу пользователей (например, с определенным девайсом/версией ОС и т.д.). Проекты уже как бы есть в сторе, но не все могут скачать альфа или бета-версию.  Грубо говоря, здесь можно оповестить своих пользователей о новом контенте, который доступен только им.  3. Страны/регионы. Здесь выбираются рынки, где нужно продвигать событие. Можно взять абсолютно любое количество стран из 176 штук (хоть одну, хоть все) в зависимости от маркетинговых целей.  4. Дата и время начала/окончания. Тут все понятно. Просто обозначьте продолжительность ивента.   5. Предварительный просмотр события. Если нужно подогреть интерес юзеров, то здесь настраивается дата и время появления в разделе «Скоро!» (только на Android-девайсе, в вебе его нет). В таком случае карточка перенаправит пользователя либо на загрузку приложения, либо откроет установленное.  6. Приоритет. Обычный, высокий, очень высокий. Приоритет влияет только на последовательность отображения ваших событий между собой, а не с событиями других разработчиков.  Если приоритет обычный или высокий, то заявку можно подать хоть за день до старта ивента. Но лучше не тянуть и приготовиться хотя бы за три дня.   Если приоритет очень высокий, то:  Его можно запустить только раз в квартал. Поэтому подходите к планированию ивентов и их приоритетов внимательно;  Такое событие нужно сохранить в черновиках минимум за 30 дней до старта ивента. На практике это требование работает не всегда. Но если опаздываете, то будьте готовы, что в последний вагон запрыгнуть уже не выйдет. Или выйдет. 50/50.  7. Слоган и описание. Слоган — обязательное поле, где за 80 символов нужно максимально точно описать суть события. Если в ивенте есть скидка, то указывайте ее прямо там (пожалуй, это одно из немногих полей для продвижения в Google Play, где еще разрешено так делать).   Описание отображается в сторе вместе со слоганом, поэтому поля должны содержать разный текст. Распишите подробнее и подумайте, чем привлечь юзеров (на это есть 500 символов). Используйте ключевые слова — есть вполне реальный шанс по ним проиндексироваться. Главное — не переборщить.   8. Основное изображение и квадратное изображение. Эти картинки станут обложкой ивента, который будет показываться пользователю на странице приложения в сторе. Они должны отражать суть события.  Здесь можно использовать как одинаковую, так и разную графику. Тут уже отталкивайтесь от загрузки вашего арт-отдела.  Технические требования такие:   основное изображение: 16:9, 1920×1080;  квадратное изображение: 1:1, 1080×1080.    9. Видео. Пункт необязательный и, честно говоря, крайне трудозатратный. Хоть и «настоятельно рекомендуется» самой площадкой (продвигать того, кто постарался больше остальных, куда приятнее). По классике в Google Play видео размещается ссылкой с YouTube.  Пункты с 7 по 9 можно локализовать на любое количество языков. Никаких ограничений, здесь вопрос лишь в приоритетах по рынкам и бюджетах. Все локализации добавляются в рамках одной заявки:   10. Сохранение проекта. Когда заполнили все пункты, событие нужно сохранить как проект (то есть в черновик, с которым можно работать позже) или же сразу отправить на проверку.  Важно: после отправки события на проверку, в нем ничего нельзя изменить. Платформа предупредит об этом, чтобы вы могли дополнительно все перепроверить.  Создание карточки в App Store В App Store карточки событий появились еще раньше, чем в Google Play. Называются они App Store In-App Events, логика очень похожа. Пройдемся также по пунктам, а потом посмотрим на различия.  Раздел «Информация о событии»  1. Название. Не более 30 символов, индексируется на предмет ключевых слов. Много ключевиков в такое короткое поле не зашьешь, да и один, если честно, не всегда выходит. К тому же Apple довольно придирчивы к самому тексту. Рискованно писать что-то расплывчатое — попросят объяснить, что вы имели в виду. Хотя всегда можно пояснить название в подробном описании и расписать, что конкретно входит в ивент.  2. Краткое описание. Содержит 50 символов и тоже индексируется на предмет ключевых слов. Располагается внизу баннера сразу под основным названием. Может содержать СТА (click to action) — что угодно, чтобы привлечь пользователей.  Краткое описание на баннере Краткое описание на баннере 3. Медиаматериалы карточки события. По размерам и разрешениям этот пункт почти не отличается от аналогичного в Google Play (16:9, 1920×1080), за исключением одного момента: нижняя часть карточки всегда блюрится самой Apple. Как мы в Pixel Gun 3D боремся с этим, я расскажу чуть ниже.  Также вместо статичного баннера в это поле можно добавить видео (тут уже требований побольше, они есть по ссылке в разделе ​​«Image and video specifications»).  4. Подробное описание. Максимум 120 символов, неиндексирующихся на предмет ключевых слов, где вы должны максимально подробно расписать информацию об ивенте.  5. Медиаматериалы страницы с информацией о событии. Здесь размещается вертикальное изображение (9:16, 1080×1920) или видео, используемое для представления встроенного события на странице с информацией о нем. Грубо говоря, при тапе на карточку 1920×1080 откроется именно эта карточка, которая содержит подробный текст внизу вертикального баннера.   Из нюансов — тот же самый блюр, что и в пункте 3.  6. Значок. Пункт-аналог «типу события» в Google Play. Содержит 7 вариантов:  Событие в прямом эфире — реал-тайм ивенты. Например, спортивные матчи, турниры, концерты. Обязательное требование: свежий, уникальный контент.  Премьера — нечто совершенно новое в вашем приложении.  Испытание — ивент, мотивирующий юзера успеть выполнить все цели. Например, спортивные челленджи или челленджи, где пользователь должен пройти конкретное количество уровней игры за фиксированное время.  Соревнование — событие, в котором пользователи сражаются между собой, видят результаты друг друга в турнирных таблицах, и стараются занять как можно более высокое место за уникальные награды.  Новый сезон — свежий контент, который развивает уже существующие механики или фичи.  Специальное событие — ограниченный по времени ивент, который нельзя отнести только к одному типу. Может содержать в себе сразу несколько фич, новый контент, коллаборацию и другие.  Большое обновление — когда вы приготовили очень много контента (режимы, уровни), который нельзя назвать мелкими улучшениями.  Раздел «Доступность по странам и регионам» 1. Доступность. Выбираются страны, на которых нужно продвигаться. По умолчанию выделены все 175 штук, но можно отредактировать.  2. Дата и время начала/окончания. Продолжительность ивента.  3. Дата и время начала публикации. То же, что и предварительная публикация события в Google Play — можно проставить, с какого дня и месяца событие отобразится на странице приложения.  Раздел «Дополнительная информация» 1. Оригинальное название. Не показывается пользователям, а служит лишь собственным ориентиром в отчетах. Содержит до 64 символов.  2. Прямая ссылка на событие. Одно из основных отличий карточек In-App Events от карточек Google Play LiveOps. Сюда (как правило, с помощью продукта) добавляется универсальная ссылка или специальный URL-адрес, направляющий пользователей прямо к контенту ивента в приложении.   3. Цель события. Apple предлагает четыре цели продвижения карточек:  Подходит всем пользователям — карточка будет отображаться всем пользователям iOS 15 и новее.  Привлечь новых пользователей — людей, которые никогда не загружали ваше приложение.  Держать активных пользователей в курсе — юзеров, которые загрузили приложение и недавно его открывали.  Вернуть недействительных пользователей — тех, которые установили приложение, но давно его не открывали.  Статистика по пользователям от App Store выдается крайне урезанная (начиная с iOS 14.5 и появления IDFA). Мы обычно выбираем первый тип, чтобы не резать собственную аудиторию и получить результат поинтереснее.  4. Приоритет события. Он влияет на отображение ваших карточек между собой. Приоритет либо нормальный, либо высокий.  5. Для доступа к событию требуется внутриигровая покупка. Здесь только два варианта: требуется или нет.   6. Основной язык. Как правило, это английский. Его можно поменять в настройках на основной странице приложения, если целитесь на другую геолокацию.  Как и в Google Play, по желанию можно локализовать материалы и тексты на любое количество языков в рамках одной заявки.  Особенности лайв-опс карточек по платформам Быстро пробежимся по важным отличиям и особенностям платформ.  1. Карточки событий в App Store видят только пользователи iOS 15 и новее. Учитывайте это на этапе аналитики и периодически проверяйте процент пользователей, использующих нужную версию ОС (например, через AppsFlyer).  2. В App Store могут одновременно одобрить до 10 ивентов, но опубликовать на странице разрешает только 5. В Google Play ограничивает лишь здравый смысл — не стоит перегружать страницу большим количеством событий. Юзеры могут просто растеряться от обилия контента.   4. Google сам регулирует некоторые типы событий по времени, максимальное время — до 28 дней. Apple разрешает ставить до 30 дней на любой тип ивента.  5. В App Store есть возможность предпросматривать карточки для каждой локализации. Можно сразу оценить, как будет выглядеть карточка, не обрезается ли криво графика, органично ли вписывается текст.   Думаю, все арт-отделы мира говорят дополнительное спасибо Apple. В Google такого нет, а ведь штука весьма удобная.   6. App Store блюрит нижнюю часть карточки, помещая поверх значок/название/краткое описание. Чтобы избежать лишнего головняка при согласования арта, мы придумали такую схему:  Для графики 1920×1080: рисуем основную часть композиции, 200 пикселей снизу блюрим полностью, а на следующие 100 пикселей делаем плавный переход к самому арту. По бокам оставляем по 90 пикселей с обеих сторон (иногда просто блюр), так как App Store при публикации эту часть обрезает.  Для графики 1080×1920: добавляем снизу 600 заблюренных пикселей, поверх которых будет размещен текст, а на следующие 100 пикселей делаем плавный переход. Основная часть композиции должна находиться выше.  7. Обязательным пунктом для отправки на проверку в Apple является прямая ссылка на событие. По сути нужно предоставить ревьюерам ссылку, которая будет вести юзеров именно в ту часть приложения, где проводится конкретная акция/событие/скидка.   Если пользователь уже активно пользуется приложением, то переход с карточки в сторе осуществится в зашитое в ссылке место. Если приложение установлено недавно, то карточка просто откроет приложение.  Напоследок Сложностей с заполнением формы не будет возникать — дело практики. Если все заполнено правильно, то шанс получить реджект минимален. Но и они иногда случаются.  Однажды мы получили отказ, когда ревьюер стора не разобрался, как работают диплинки. Он пробовал открыть ссылку не с мобильного девайса (с предустановленным приложением), а прямо на PC. Поэтому в тексте реджекта было указано, что ссылка ведет в браузер, а не в приложение.   Нам пришлось записывать прямо с девайса видео, где мы нажимали на ссылку, после чего запускалась игра и открывалось нужное место. Сопроводили все это вежливым текстовым пояснением о том, что чтобы диплинк сработал корректно, его нужно открывать с мобильного устройства. Ревьюера это полностью устроило, даже сказал спасибо за подробные пояснения. И такое бывает.",
    "user": "6c1be9ea-b5ea-4d3a-b44e-0aa0402264a5",
    "category": 4,
    "tag": [
      14,
      15,
      13
    ]
  }
},
{
  "model": "articles.article",
  "pk": 2,
  "fields": {
    "registration_time": "2022-07-12T13:19:57Z",
    "slug": "v-trafik-sajtov-opyat-vnedryayut-postoronnij-kontent-kak-zashititsya",
    "is_active": false,
    "title": "В трафик сайтов опять внедряют посторонний контент. Как защититься?",
    "body": "В последнее время участились случаи инъекций стороннего контента на страницы российских сайтов, не защищённых HTTPS. Этим занимаются некоторые операторы связи, то есть это законная практика.  Логично, что если вам противостоит легальная угроза, то от неё следует защищаться техническими средствами.  Как сообщается, фишинговые подмены в основном происходят с участием доменов *2ad.wtf и news.truth.delivery: «В параметры запроса фишингового скрипта прокидывается адрес подменённого скрипта и регион подключения абонента (в текущем случае СПб)», — пишет автор. Далее загружается уже настоящий скрипт запрашиваемого сайта, чтобы всё выглядело нормально. Вот как это делается:    По словам пользователя, его провайдер совершал инъекции крайне неприемлемой медийной рекламы с «мусорных» источников. Старая проблема  На самом деле это довольно старая проблема. Например, крупнейший в России телекоммуникационный провайдер начал встраивать рекламные баннеры на сайты без HTTPS ещё в 2020 году. Тогда представители компании пояснили, что это контекстная персонализированная реклама, которая показывается только по желанию пользователя.  Ранее ещё в 2016 году сообщалось, что из-за рекламной акции одного из мобильных операторов на мобильных сайтах СМИ появлялась реклама его фирменной услуги «Мини-кабинет». А в сентябре 2018 года другой мобильный оператор показывал абонентам рекламу своего сервиса при посещении сайта правительства.  Пользователи в комментариях к текущей записи 2022 года подтверждают наличие проблемы:  Сталкивался с этим в апреле. Переезжал, и интернет проведён не был, пришлось пользоваться телефоном в качестве модема. На проекте по работе [мобильный оператор] подменял скрипты Hubspot на такие же баннеры. [Домен] news.thruth.delivery там же фигурировал.  Такое практикуется и в сетях сотовой связи, и проводного интернета, подтверждают специалисты.  На Хабре публиковалось несколько расследований на эту тему:  Рекламные баннеры Ростелекома и как с ними бороться Вы не смотрите рекламу во время разработки? Непорядок DPI: Deep Packet INJECTION, или конспирологическая теория о заговоре между RTK и MRG  Решение проблемы — сертификат TLS  Эта история ещё раз показывает, почему все сайты без исключения должны перейти на HTTPS с шифрованием трафика. Только сертификат TLS гарантирует защиту этого канала. В него не проникнет ни провайдер, ни другие третьи лица. Инъекция стороннего контента невозможна.  Согласно отчёту исследовательской компании Frost & Sullivan, в 2018–2022 годы количество публичных сертификатов TLS выросло на 36,0%. В то же время число удостоверяющих центров (УЦ) сократилось.  Основанная в 1996 году GMO GlobalSign остаётся одним из старейших центров сертификации в мире. Компания со штаб-квартирой в Японии входит в число ведущих мировых УЦ, занимая долю 8,9% и 4-е место в 2021 году, сказано в отчёте. Как отмечается, основной рост бизнеса во время пандемии COVID-19 пришёлся на Облачный сервис цифровой подписи, который внедряет юридически законные цифровые подписи в документооборот предприятия. Здесь любой сотрудник может дистанционно подписывать любые документы.    То есть рынок сертификатов TLS вырос и количественно, и качественно — в разные стороны и сферы применения. Конечно, для защиты от вышеупомянутых инъекций «Ростелекома» достаточно стандартного сертификата Let's Encrypt, но вот более комплексные задачи требуют более цельных решений. Сегодня рынок включает в себя сертификаты для веб-приложений, защиты электронной почты, цифровых подписей, Интернета вещей (IoT) и прочих вариантов применения инфраструктуры открытых ключей (PKI).  Публичные УЦ несут огромные капитальные и операционные расходы на создание и поддержание инфраструктуры PKI. Более того, частые обновления стандартов сертификатов, навязываемые форумом CA/Browser Forum, требуют от постоянного обновления инфраструктуры, пишет Frost & Sullivan.  Последние истории в Рунете показывают, что сертификат нужен каждому сайту, даже если это самая простая страничка.  Только HTTPS может гарантировать, что никто не подменит ваш контент на пути от сервера к клиенту.",
    "user": "ad8a5d72-8196-4981-a5d3-e4194d3ca0ef",
    "category": 4,
    "tag": [
      16,
      18,
      17
    ]
  }
},
{
  "model": "articles.article",
  "pk": 3,
  "fields": {
    "registration_time": "2022-07-12T13:27:58Z",
    "slug": "headhunter-v-rossii-nachal-vosstanavlivatsya-spros-na-razrabotchikov-prilozhenij-dlya-ios-i-android",
    "is_active": false,
    "title": "HeadHunter: в России начал восстанавливаться спрос на разработчиков приложений для iOS и Android",
    "body": "HeadHunter подсчитал вакансии на позиции разработчиков мобильных приложений за месяц начиная с февраля. Их них следует, что в июне в России разместили 1,3 тыс. вакансий, связанных с разработкой для iOS, и 1,4 тыс. — для Android. Впервые с конца февраля число вакансий выросло в течение месяца, а не упало. Об этом пишет «Коммерсантъ».  Минимум объявлений об открытых позициях пришёлся на май (1024 — iOS-вакансий, 1164 — Android). Однако число вакансий не вернулось к февральскому уровню: тогда оно составляло 1,5-1,6 тыс.  Большинство вакансий мобильных разработчиков (77%) на HeadHunter разместили компании из IT-сектора. Компании из отдельных непрофильных отраслей заметно сократили наём таких специалистов с февраля по июнь: так произошло в b2b-услугах (с 183 до 125 вакансий), строительстве и недвижимости (с 69 до 11), медицине и фармацевтике (с 24 до шести).  При этом выросло количество вакансий мобильных разработчиков у компаний из сфер логистики, перевозок и внешнеэкономической деятельности (с 22 до 53), а также рекламного, дизайнерского и медиабизнеса (с 145 до 194). В HeadHunter также отметили снижение числа вакансий для junior-разработчиков (с 1887 до 1392) и рост для специалистов среднего уровня (c 1221 до 1378).  Сокращение числа вакансий для начинающих за год вне зависимости от профиля зафиксировали и в SuperJob: «IT-сфера имеет высокий порог вхождения, в приоритете — практический опыт». В компании уточнили, что в последнее время сократилось количество вакансий из-за рубежа и готовность программистов к релокации, однако не предоставили показателей, которые бы это подтверждали. В SuperJob также отметили снижение общего количества IT-вакансий по сравнению с 2021 годом на 21%.",
    "user": "5d06f46d-0bff-43da-a85e-41d74235093f",
    "category": 3,
    "tag": [
      20,
      21,
      19
    ]
  }
},
{
  "model": "articles.article",
  "pk": 4,
  "fields": {
    "registration_time": "2022-07-12T13:19:57Z",
    "slug": "chempionat-ili-viktorina-skolkovo-razygraet-25-mesyachnyh-oklada-java-razrabotchika",
    "is_active": false,
    "title": "Чемпионат или викторина? Сколково разыграет 2,5 месячных оклада Java-разработчика",
    "body": "Фонд «Сколково» и IT_One организуют чемпионат среди Java-специалистов на платформе All Cups. Участникам предлагают побороться за призовой фонд в 700 000 рублей, что в среднем по рынку соответствует 2,5-3 окладам разработчиков уровня middle и выше. Прием заявок для участия в онлайн-чемпионате открыт до 10 августа.  Понять дотягивает ли ваш уровень компетенций до борьбы с топовыми специалистами по Java вы сможете в рамках квалификационного раунда. За 5 дней участникам потребуется создать собственный сервис на заданном API. Тест квалификационных работ пройдет автоматически.  Победители, занявшие в финале чемпионата с 1 по 5 места, получат денежные призы от 80 до 250 тысяч рублей. Участники с наибольшим количеством баллов по итогам двух раундов и авторы лучших решений также получат возможность присоединиться к команде IT_One.  Павел Новиков, директор центра инноваций в финансовом секторе Фонда «Сколково» уверен, что чемпионаты – отличная возможность для компаний побороться за крутых специалистов: «Игроки рынка IT ведут активную борьбу за талантливых java-разработчиков. Хакатоны и соревнования — это один из самых востребованных и успешных инструментов для популяризации бренда компании, позволяет представить реальные рабочие задачи для потенциальных сотрудников и лучших привлечь в команду».  Вопрос: Какой должна быть ваша мотивация, чтобы вы приняли участие в подобном турнире?",
    "user": "5d06f46d-0bff-43da-a85e-41d74235093f",
    "category": 3,
    "tag": [
      5
    ]
  }
},
{
  "model": "articles.article",
  "pk": 5,
  "fields": {
    "registration_time": "2022-07-12T13:19:57Z",
    "slug": "dizajner-predstavil-koncept-elektromobilya-teleskopa",
    "is_active": false,
    "title": "Дизайнер представил концепт электромобиля-телескопа",
    "body": "Дизайнер транспорта Хюнсик Мун (Hyunsik Moon) показал концепт электромобиля под названием Zodiac Stargazer. По замыслу автора, это умный телескоп на колесах для двух пассажиров, которые могут отправиться ночью за город и посмотреть на звезды.   В реальности такое устройство пока создать нельзя. Нет технологий для создания подобного телескопа со свободной точкой фокусировки. Также в проекте не учтена необходимость защиты линз от загрязнений. Непонятно, как именно выглядят места для размещения пассажиров и как управлять такой машиной.    Мун представил, что машина-телескоп, благодаря уникальной конструкции, может двигать кабину с помощью специального механизма и направлять её на небо, «выдвигая» объектив-«лобовое стекло» вверх, как настоящий телескоп. В этом случае водитель и пассажир лежат и смотрят на небо.    Технические детали Мун оставил без пояснений. У экспертов возникли вопросы по поводу реализации такого концепта. Им непонятно, как работает в этом случае механизм автоматической настройки резкости, как и куда именно выводится картинка с телескопа, почему на точность фокусировки не влияют находящиеся вблизи астрономической аппаратуры люди, дыхание и движения которых не позволит проводит точные астрономические наблюдения.",
    "user": "6c1be9ea-b5ea-4d3a-b44e-0aa0402264a5",
    "category": 1,
    "tag": [
      23
    ]
  }
},
{
  "model": "articles.article",
  "pk": 6,
  "fields": {
    "registration_time": "2022-07-12T13:19:57Z",
    "slug": "dostupnost-i-frontend-standarty-razrabotki-produktov-dlya-nezryachih-i-slabovidyashih-lyudej",
    "is_active": false,
    "title": "Доступность и frontend: стандарты разработки продуктов для незрячих и слабовидящих людей",
    "body": "Согласно данным Всемирной организации здравоохранения, серьезные проблемы со зрением испытывают около 300 миллионов человек на нашей планете. Из них более 40 миллионов являются полностью незрячими.  Это огромная цифра, для сравнения: население Испании составляет всего 60 миллионов человек. По сути, в мире существуют целые «страны», населенные людьми с ограничениями по зрению, которым точно так же хочется общаться, делиться информацией и получать знания из всемирной паутины, как и всем нам.  Проведите эксперимент: закройте глаза и попробуйте воспользоваться Интернетом – прочитать новости на сайте Яндекса, зайти в вашу любимую социальную сеть или записать голосовое сообщение в мессенджере другу. Скорее всего, у вас ничего не получится.  А ведь с подобными проблемами каждый день сталкиваются миллионы слепых людей по всему миру. Итак, как же сделать сайт или приложение более доступными для незрячих и слабовидящих?  Для начала узнаем у них самих, как такие люди взаимодействуют с компьютером и Интернетом.  Как увидеть Интернет. История Алисы.  «Я полностью потеряла зрение, когда мне было 12 лет. Было очень тяжело привыкать к новой жизни, приходилось заново учиться пользоваться компьютером и мобильным телефоном. К счастью, крупные компании, такие как IBM, Google, Сбер и Яндекс давно занимаются проблемами доступности и успешно их решают.  А многие слепые люди благодаря новейшим технологиям получили возможность работать в сети, в том числе программистами и копирайтерами. Сейчас даже появились специальные умные очки, которые сканируют окружающую среду, распознают визуальную информацию и элементы ландшафта и вслух описывают происходящее. Но пока такие технологии еще не доступны для большинства простых людей.  Многие удивляются, как же незрячий человек может прочитать новости в Интернете?  Все дело в том, что мы используем так называемые «скринридеры». Это специальные программы, которые считывают текст с экрана и воспроизводят его синтетическим голосом. Сначала было жутко неприятно слушать этот бездушный механический голос, но спустя годы он уже воспринимается как родной. Мы слушаем текст на очень высокой скорости (4.5х-5х), и это позволяет нам усваивать большие объемы информации.  Не все могут позволить себе приобрести тактильный дисплей, который воспроизводит символы с помощью шрифта Брайля. Но даже платное ПО для экранного доступа (например, JAWS) является вполне доступным для многих пользователей. В крайнем случае, всегда есть бесплатные аналоги с открытым кодом, такие как NVDA.  Почти все скринридеры работают в браузерах Internet Explorer и Firefox. Google Chrome слепые люди используют довольно редко. Он не позволяет читать текст в заполненных формах, и вообще с ним сложно работать. Такая же история с Opera и Яндекс-браузером, хотя сами поисковые системы очень удобные и позволяют легко ориентироваться и воспринимать контент, как и главный сайт Яндекса.  Я, как и многие мои слепые друзья, для общения используем социальные сети – Вконтакте и ее американский аналог, но предпочитаем мобильную версию. Помимо этого мы пользуемся теми же приложениями, что и люди с нормальным зрением: Яндекс Диском и Google Drive, например, для обмена файлами.  Работаем на самых обычных ноутбуках, на моем установлен Windows 10, кстати. С компьютерной мышкой я не работаю, всё делаю с клавиатуры, печатаю десятипальцевым методом. Голосовой ввод тоже часто использую, очень удобно».  Итак, получив представление об основных нюансах взаимодействия слабовидящих и незрячих людей с современными технологиями, мы теперь можем перейти к обсуждению конкретных способов адаптации веб-ресурсов, сайтов и приложений под нужды людей с ограничениями по зрению.  Как адаптировать сайт для дальтоников. Советы Светланы.  «Впервые я узнала, что я дальтоник, в первом классе, когда на уроке рисования учитель попросил раскрасить картинку с животными. Я раскрасила всё очень яркими красками и с гордостью ему показала. Именно тогда и выяснилось, что яркими эти краски казались только мне, и в этот день я впервые услышала от школьного врача слово «дальтонизм».  Но следует разделять полную цветовую слепоту и просто нарушение восприятия цвета. Большинство дальтоников способны различать цвета, но при этом имеют сложности с восприятием оттенков одного цвета.  Как адаптировать ваш сайт или приложение для таких людей, как мы? Это не сложно, достаточно следовать следующим рекомендациям.  Главное правило – следите за тем, чтобы все элементы на сайте были контрастными, потому что мы различаем цвета по яркости. Темный текст на светлом фоне сможет прочитать любой человек с дальтонизмом.  Чем меньше цветов и градиентного фона вы используете в дизайне, тем лучше. Предпочтительнее использовать синий и серый цвет, их воспринимают практически все дальтоники.  Не следует использовать оттенки одного и того же цвета рядом, их нам будет очень трудно различить.  Старайтесь передавать информацию для пользователя визуально, а не цветом. Вместо того, чтобы помечать поле с ошибкой красным цветом, всегда лучше сделать соответствующую иконку с текстом.  Если сомневаетесь, хорошо ли ваш сайт адаптирован для людей с ограничениями по цветовосприятию, проверьте ваш сайт через любое расширение для браузера, симулирующее дальтонизм. Например, можете воспользоваться расширением для Chrome Daltonize».  Как адаптировать сайт для слабовидящих. Советы Ивана.  «Однажды в результате болезни я полностью потерял зрение, но затем через несколько месяцев оно частично восстановилось. И хотя я на прогулках обхожусь без трости, мне довольно сложно воспринимать информацию, когда я пользуюсь многими веб-ресурсами в Интернете.  Тем, кто хочет адаптировать сайт для людей с частичной потерей зрения, я бы посоветовал сделать следующее:  Сделайте шрифт на сайте масштабируемым, чтобы его можно было увеличить по нажатию кнопки. Всегда используйте адаптивную верстку.  Сам контент лучше сделать максимально контрастным по отношению к фону. Этим вы очень сильно облегчите взаимодействие с вашим ресурсом людям с ослабленным зрением.  По возможности сопровождайте любой медиа-контент (фото, видео, некоторые элементы дизайна т.д.) текстовым описанием. Не все слабовидящие могут понять, что изображено на фотографии, а вот текст прочитать получится, в том числе и с помощью программ экранного доступа.  Не используйте капчу с фотографиями, мы не сможем ее прочитать. Как вариант, используйте аудио-капчу.  Если у вашего сайта есть иконка для перехода на версию для слабовидящих, сделайте ее максимально видимой, очень часто их почему-то делают маленькими, незаметными и бледными.  Проверьте, чтобы программы экранного доступа работали на вашем сайте. Скачайте пару самых популярных программ и протестируйте, всё ли считывается с экрана правильно».  Как адаптировать сайт для незрячих. Советы Альбины.  «Я полностью потеряла зрение в результате травмы, когда была ребенком. Меня всегда интересовала сфера IT из-за возможности работать удаленно с клиентами в других городах. Со временем я стала помогать разработчикам адаптировать сайты для незрячих и тестировать правильность их работы и отображения контента. Сейчас я с вами поделюсь основными моментами, как адаптировать сайт для слепых людей. Помните, что мы воспринимаем ваш веб-ресурс на слух, а не глазами.  Самое главное правило – структурируйте информацию на вашем сайте с помощью HTML-тегов.  Используйте заголовки и подзаголовки <h1>-<h6>, нумерованные и маркированные списки (<ol> и <ul>), теги семантической разметки <header>, <main>, <section>, <footer> и другие.  Тогда незрячий человек сможет с помощью быстрых клавиш найти нужные данные и будет свободно перемещаться по элементам страницы. Вообще, если сайт технически оптимизирован для поисковых систем, он уже достаточно хорошо адаптирован под потребности незрячих пользователей.  Также обязательно заполняйте атрибут «alt» у изображений внутри тегов <img>, иначе незрячий человек не сможет понять, что происходит на картинке. Но с другой стороны, если графический элемент выполняет чисто декоративные функции и не несет смысловой нагрузки, то оставьте данный атрибут пустым (alt=\"\"), чтобы не сбивать с толку слепого пользователя.  Добавьте возможность управлять функциональностью контента вашего сайта с помощью клавиатуры, ведь незрячие люди не пользуются мышкой.  Важно, чтобы на сайте корректно работал фокус, и незрячий человек мог, например, использовать клавишу «Tab», пробел и стрелки для перемещения от одного элемента страницы к другому, а детали интерфейса могли обрабатывать клик по нажатию клавиш «Enter» и «Esc».  Еще один важный момент: на некоторых сайтах плохо оформлен поиск. Часто бывает, что слепому человеку проблематично найти поисковую строку или невозможно установить в поле поиска курсор с помощью программы экранного доступа. Не используйте атрибут «title» для описания ссылок, так как скринридеры его не озвучивают.  Обязательно тестируйте ваш сайт на доступность, желательно используя разные скринридеры, потому что программы экранного доступа часто отличаются в работе сильнее, чем браузеры. Если есть возможность, попросите слепого человека за вознаграждение воспользоваться вашим сайтом и дать вам обратную связь.  Для более детальной информации по адаптации сайтов с конкретными примерами, воспользуйтесь документацией на сайте w3.org или русскоязычным аналогом ресурса Веблайнд».  Хотите знать больше?  В данной статье мы рассмотрели лишь основные правила для адаптации вашего веб-ресурса или приложения для людей с ограничениями по зрению.  Если же вы хотите более подробно ознакомиться с материалами, рекомендую воспользоваться следующими ресурсами:  1. Международный стандарт WCAG 2.0 для пользователей с различными ограничениями здоровья.  2. Российский национальный стандарт доступности веб-ресурсов для инвалидов по зрению ГОСТ Р 52872-2012.  И помните, что адаптируя ваш сайт для слабовидящих, незрячих и людей с дальтонизмом, вы облегчаете работу в Интернете сотням тысяч и делаете их жизнь лучше.",
    "user": "ad8a5d72-8196-4981-a5d3-e4194d3ca0ef",
    "category": 1,
    "tag": [
      25,
      24
    ]
  }
},
{
  "model": "articles.article",
  "pk": 7,
  "fields": {
    "registration_time": "2022-07-12T13:19:57Z",
    "slug": "kak-sdelat-udobnuyu-dizajn-sistemu-cveta-chast-1",
    "is_active": false,
    "title": "Как сделать удобную дизайн-систему. Цвета. Часть 1",
    "body": "Дизайн-система позволяет быстро взаимодействовать с компонентами, легко вносить изменения во все макеты и в целом прививает дизайнеру навык организации больших объемов информации.  Зачастую, дизайнер начинает делать дизайн-систему аккуратно, придавая ей должное внимание. Но в по мере увеличения экранов становится, как мне кажется, морально труднее вносить новые компоненты и корректировки. Но помните одну вещь - чем больше времени уделить дизайн-системе, тем больше времени она сэкономит в будущем.  Основное правило дизайн-систем: чем меньше компонентов — тем лучше и вам, разработчику и конечному юзеру. Это касается количества цветов, шрифтов, иконок и так далее. Дизайн будет выглядеть более консистентным и единым.  Цвета Цвета нужны не только для того, чтобы показать как выглядит ваш дизайн, но они также вызывают эмоции от использования продукта или сервиса, показывают персонализацию вашего бренда и буквально «разговаривают» с пользователем.  Определите цветовую палитру Определение цветовой палитры очень важный этап в построении дизайн-системы, но часто этот процесс вызывает трудности. Настроение, эмоции, запоминаемость — все это цвета.  Базовая цветовая палитра должна содержать в себе следующие оттенки: нейтральный (Neutral) , главный (Primary) , акцентный (Secondary) и «обратная связь» (Feedback).  Вам не нужно делать по 50 оттенков каждого цвета. Это даст только путаницу, но никак не пользу. Вместо этого постарайтесь сделать около 6-12 и используйте один цвет в одном и том же месте на всех макетах.  Например, обводка инпута в дефолтном состоянии на первом экране «Neutral / 300». Тогда на следующих экранах она должна быть точно такая же.  Нейтральный (Neutral) в основном применяется в дефолтных или выключенных состояниях элементов. Обычно, это оттенки серого или синего.  Палитра \"Neutral\" Палитра \"Neutral\" Базовый (Primary) используется для интерактивных элементов, где требуется максимальный фокус юзера. В основном используется для элементов активном состоянии. Вы можете иметь больше чем один базовый цвет, но лучше начинать с одного.  Палитра \"Primary\" Палитра \"Primary\" Акцентные (Secondary) используются для поддержки базового цвета. Могут использоваться для бейджей или лейблов.  Цвета обратной связи (Feedback) нужны для того, чтобы визуально сообщать пользователю о результатах его возможных действий. Ошибку или критическое действие (Error) показывают красным цветом. Например, удаление строки данных из таблицы. Предупреждение (Warning) — оранжевым. Успех (Success) — зелёным.  Палитра \"Error\" Палитра \"Error\" Палитра \"Warning\" Палитра \"Warning\" Палитра \"Success\" Палитра \"Success\" Определите цветовую палитру перед тем, как начнёте делать следующие экраны Большое количество дизайнеров попадают в неудобную ситуацию, в процессе создания UI без стилей цветов. Когда экранов становится больше — возникнет «пипеточная» ситуация. Придётся прыгать от одного макета к другому, чтобы взять такой же цвет.  Чтобы этого не возникло представим, что вы сделали первый экран, на котором есть модальное окно календаря (взял в пример его так как там обширное количество цветов).   Затем вы последовательно начинаете создавать стили для каждого цвета помня об иерархии о которой рассказывалось выше и применяете на следующих макетах.   Нейминг: \"Neutral / 300\".  С «Neutral» все понятно, но кто такой этот «300»? Эти цифры созданы исключительно для ориентации и коннекта с между дизайнером и  . Обычно названия начинаются со 100 и заканчиваются на 900. Шаг зависит от того, сколько у вас цветов. 100 — самый светлый оттенок цвета. 900 — самый тёмный. В шрифтах такая же ситуация, только 100 — самое тонкое начертание, а 900 — толстое.  Figma позволяет удобно разделять стили по папкам с помощью слэша «/». Пользуйтесь этим, чтобы создать правильную иерархию.   Контраст При выборе цветовой палитры нужно всегда держать в голове доступность для пользователей вашего интерфейса. Не каждый юзер имеет хорошее зрение или монитор 4К. Хороший UI должен быть хорошим для всех.  Одним из главных пунктов в доступности является контраст.  Хорошим способом проверять насколько ваш текст контрастен на том или ином фоне является сравнение с помощью рекомендаций Web Content Accessibility Guidelines (WCAG) 2.1.  В Figma Community вы можете найти большое количество плагинов для анализа контраста. Я предпочитаю плагин, который изображен ниже.   Как понять какой контраст мне подходит? Лучше всего когда ваш контраст соответствует уровню AA для большинства элементов в UI.   Итог Выбор цветов влияет на восприятие продукта, его доступность и запоминаемость.  Главное, уделить должное внимание этим вещам, так как если этого не сделать, вы обретете себе проблем в будущем, когда количество экранов будет тяжело сосчитать.",
    "user": "5d06f46d-0bff-43da-a85e-41d74235093f",
    "category": 1,
    "tag": [
      30,
      31,
      32
    ]
  }
},
{
  "model": "articles.article",
  "pk": 8,
  "fields": {
    "registration_time": "2022-07-12T13:19:57Z",
    "slug": "kem-rabotat-v-it-v-2022-frontend-razrabotchik",
    "is_active": false,
    "title": "Кем работать в ИТ в 2022: Frontend-разработчик",
    "body": "Рубрика «Кем работать в ИТ» — интервью с представителями  ИТ-профессий, в которых специалисты рассказывают о тонкостях своей работы: плюсах, минусах, подводных камнях и заработной плате. Мы надеемся, что джунам и стажерам эта рубрика поможет больше узнать о том, что их ожидает на карьерном пути, а профессионалам — посмотреть на свою специальность через чужой опыт и, может быть, открыть для себя что-то новое.  Сегодня о своем опыте работы нам расскажет Константин Фокин, старший фронтенд-разработчик Flowwow.  Константин окончил Таганрогский радиотехнический университет по специальности «Инженер-программист систем автоматизированного проектирования», но по профессии работать не стал. В начале карьеры занимался версткой страниц на сайтах и отвечал на телефонные звонки. А после неудачных попыток попасть в IT ушел работать в колл-центр, откуда все и началось.  «В моем профайле в SLACK уже три года как написано: чувак с фронта. Так меня однажды представил наш техдиректор» (с) Константин Ф.  По данным зарплатного калькулятора Хабр Карьеры, средний размер заработной платы фронтендера составляет чуть больше 150 тысяч рублей в месяц. Конечно, это среднее значение. Есть те, кто зарабатывает значительно меньше: 60-90 тысяч, а есть и те, кто получает 270 тысяч рублей.  О специальности Расскажите простыми словами, чем вы сейчас занимаетесь? Поддерживаю наш текущий фронтенд (клиентский сайт Flowwow) и параллельно участвую в разработке нового, который называется у нас неофронт.   На старом проекте занимаюсь немного рефакторингом, верстаю всё — от простых модалок и кнопочек до сложных виджетов и отдельных страниц. Если не очень сложный, то и бэкенд сам себе пишу для задач. Ну и JavaScript, много JavaScript.  Из последнего, что делал интересного и сложного:   полностью перепридумали и поменяли корзину на сайте,  сделали для мобильной версии сайта виджет с адресом и временем доставки: взяли макет — отдали пользователям новые и красивые интерфейсы.  Старый фронт уже действительно очень стар, ему более 7 лет, он написан на jQuery и на React (новый проект собираем на Nuxt + Vue).   Пишу много кода и регулярно общаюсь с нашими веб-дизайнерами. По сути, дизайнерский макет и является для меня техническим заданием, а где-то только прописана логика, поэтому я работаю в тесном контакте с продуктовой командой.  Ещё одна моя важная часть работы — CR для ребят. У нас в этом плане хорошая практика — не выпускать задачи, не прошедшие Code Review хотя бы одного коллеги. И это на самом деле довольно важная часть работы: найти и аккуратно указать на ошибки, проследить их исправление, а заодно выискивать крутые решения коллег и брать их себе на вооружение.   Фронтенд — это то, каким наш сервис видят пользователи. Это самое острие бизнеса, точка контакта Flowwow с клиентом. От качества фронта зависит, будет ли клиенту с нами либо хорошо и удобно, или трудно и непонятно (и тогда он уйдет от нас туда, где все удобнее). Поэтому абсолютно все на нашем фронте должно быть хорошо продумано, нарисовано и реализовано.   Какое у вас образование, если есть? Высшее, но не совсем релевантное. Я окончил Таганрогский радиотехнический университет (ныне Инженерно-технологическая академия Южного федерального университета им. Н. А. Ретивова) по специальности «Инженер-программист систем автоматизированного проектирования». Теоретически, я должен был бы сейчас проектировать какие-нибудь автокады — но занимаюсь вместо этого тем делом, которым заболел еще в детстве и всегда любил заниматься.      Но в то же время образование мне очень помогает: в вузе меня научили учиться, разбираться и осваивать новое, а без этого программисту сейчас просто можно выкинуть себя на помойку.  Начало карьеры Как вы узнали о своей специальности? С чего все начиналось? Когда я был маленьким, мне в руки попала книга «Энциклопедия профессора Фортрана» про компьютерный город. Я взял ее в руки и… пропал.   А еще у моего соседа дома был компьютер. Парень был меня старше года на три, и его родители были программистами в банковском деле. Для нашей деревни (г. Новокубанск) настоящие мажоры!   Позже, когда мне было уже лет 12, была еще одна книга — «Вводный курс в информатику». Родители заметили мое увлечение компьютерами и сказали: если хочешь, чтобы мы тебе купили ПК, прочитай эту книгу. И я честно изучил ее всю от корки до корки. Для меня это был целый талмуд — страниц 400, наверное. Ну и ПК мне купили — как сейчас помню: 128Мб оперативы, win95 и диск целых 20 Гб. Это был подарок мне на день рождения в 2000-м году. Родители хотели, чтобы я с его помощью развивался, я учил на нём английский. Мне кажется, этот подарок стал ключевым в моей любви к компьютерам.   В старших классах я программировал для собственного удовольствия на Pascal. Кстати, на всю нашу школу (довольно престижную) было всего двое мальчишек, которые вот так вот программировали для себя. Информатики как предмета в школе не было, и меня учил друг, тогда уже студент. Я писал свою «игру»: это было текстовое приключение с катастрофическим количеством GOTO в коде.  Чтобы поступить в университет, я ходил на подготовительные курсы по информатике. Тогда только ввели ЕГЭ и никто толком не знал, как сдавать этот экзамен — и я, пользуясь случаем, ничего толком не делал. Но мне повезло: в марте на курсах устроили пробный ЕГЭ по профильным предметам — физике и математике (информатику тогда не сдавали). Я его написал ради интереса, получил соответственно 39 и 35 из 100 и понял, что такими темпами я никуда не поступаю. Оставшиеся два-три месяца пахал как не в себя — и настоящий ЕГЭ написал достаточно хорошо, чтобы поступить. Точные баллы помню только по русскому — 71. По математике и физике в дипломе отлично, а за экзамены примерно 68 по математике и около 60 по физике.  В общем, ничто так не бодрит, как замаячившие перспективы топтать плац вместо учебы в вузе.  Как вы искали свою первую работу в ИТ? Дело было в 2009 году, тогда все веб-студии в Краснодаре можно было пересчитать по пальцам. Я ходил по городу и обрывал номера с объявлений, ходил на собеседования в самые разные места.  Расскажите про свое первое собеседование и первое место работы. Какой вы получили опыт? Это был опыт сложный, брутальный и травмирующий. Меня не учили конкретной практике, и никто почти тогда этому не учил: курсов программирования было мало, даже видеороликов было не найти. Конечно, в вузе мы учились писать на C++, и я подрабатывал на кафедре, пытался поддерживать сайт. Но это все было бесконечно далеко от разработки.  Мне даже не приходило в голову где-то их искать и пробовать получить нужные навыки. Все тогда учились методом тыка и устной передачи знаний.  Однажды пришел по объявлению, меня спросили: «Что умеешь делать?» Я тогда только чуть-чуть учился писать на php в блокноте. Мне сказали — проваливай и больше не приходи.   В другой конторе первым делом сказали, что моим дипломом можно подтереться. Но там я все-таки проработал два дня! У начальства был странный подход к обучению сотрудников: они взяли меня с моим уровнем знаний и сказали, что научат всему, что нужно, но вместо этого всякий раз устраивали массовые перфомансы: всем офисом обсуждали, какой я идиот. Та фирма давно закрылась, а я — старший фронт. Ну и кто кого?  Третья фирма состояла только из меня и моего начальника. Я верстал отдельные страницы на сайте и отвечал на телефонные звонки от коллекторов, которые доставали шефа.    Все это меня научило только одному: плевать на дураков и все равно заниматься тем, что нравится, пусть пока и не за деньги.  Как складывался карьерный путь в ИТ после первой работы? После всех неудачных попыток я забил на IT и пошел работать в колл-центр (мне было тогда 22 года). Параллельно программировал понемногу «для себя».   Однажды мой однокурсник Иван Могилат подогнал мне клиента, которому надо было сверстать форму обратной связи. Я неожиданно для самого себя справился с задачей — и получил свои первые деньги за программирование. Так я понял, что могу что-то делать и начал понемногу подрабатывать программистом на фрилансе. Но работать в таком режиме было сложно и не очень прибыльно. На фрилансе же как потопаешь, так и полопаешь, а «топать» как следует я тогда еще не научился.   Через пару лет я перешел в веб-студию уже в роли программиста — и вот там столкнулся с фронтендом. Это был совсем не тот фронтенд, с которым сейчас приходится иметь дело, а мучительная верстка под печально известный Internet Explorer 6. По сути, я работал фуллстаком — с Symphony на бэкенде и jQuery + KnockoutJS на фронте.  Потом в январе 2013 я пошел работать в компанию «Магнит»: там в то время работала моя жена, и я знал, что им всегда требуются IT-специалисты. Кодил бэк на Python и фронтовую часть на ExtJS (меня продолжало бросать из стороны в сторону). Писал новый функционал и поддерживал в рабочем состоянии инструменты для закупки.   Там я получил отличный опыт личного менеджмента: меня научили широко смотреть на свою работу. Например, когда работаешь и видишь косяк у коллеги в коде, не надо с постным лицом проходить мимо, как будто тебя это не касается. Либо иди к коллеге разбираться, либо исправь сам.  До 2018 года я получил очень разнообразный, но в целом поверхностный опыт программирования. И надо сказать, к фронтенду я тогда относился даже с брезгливостью. Может быть, сыграл свою роль негативный опыт с IE 6, но, честно скажу, тогда разработка на фронте казалась мне жалким служебным отстоем. А на бэке в это время творилась магия: базы данных, целые миры «под капотом»... Поэтому, когда тот же мой друг Ваня Могилат позвонил и сказал, что в Flowwow, где он работает, освободилось место фронтендера, я поначалу отказался. Но задумался! Начал изучать вопрос, и быстро выяснилось, что, пока я метался по разным направлениям, JavaScript очень изменился, появились Angular, Backbone… Кроме того, Ваня сказал, что у них фронтенд пишется на React, и я просто ради любопытства стал изучать этот стек.  Днем работал на фрилансе, а по ночам учил — и мне этот стек очень понравился! Прямо захотелось на нем поработать.  Какая была ваша первая зарплата, если не секрет? Первая была смехотворной, даже называть ее нет смысла (ладно, это были 4000 рублей, я не шучу). А с 2013 года по уровню зарплаты я рос достаточно уверенно. В студии получал 15 тысяч рублей, и мне этого хватало на жизнь. В 2014 в «Магните» получал 25 тысяч, и тогда это казалось ох какой серьезной суммой. В 2018 на фрилансе зарабатывал уже под 80 тысяч — но это была работа нон-стоп и днем и ночью, без выходных и праздников. Так, конечно, не надо делать.   Сегодня попасть в ИТ стало проще — множество компаний предлагают свои программы обучения по разным специализациям. Сейчас на Хабр Карьере опубликовано более ста курсов для тех, кто хочет изучить фронтенд. Программы разные: как для опытных специалистов, так и для тех, кто хочет изучить профессию с нуля.  Компания Как вы попали в компанию, в которой работаете сейчас? Где нашли вакансию, на какую должность, и как прошло собеседование? Собственно, именно с Flowwow начался мой осмысленный путь во фронтенде. Меня собеседовали сооснователь компании и тимлид команды фронтенда Артем Гамбицкий, технический директор Дмитрий Шестернин и тогдашний фронтенд-девелопер Яна (меня брали ей в помощники).   К тому моменту я побывал уже на стольких собеседованиях, что совершенно не волновался. Наоборот, мне было любопытно, я решал задачки, которые мне дают, и задавал встречные вопросы — не чтобы показать заинтересованность, а из искреннего любопытства: зачем вы ищете нового человека? Куда предыдущий делся? Какой специалист вам нужен?   С 2018 года я работаю здесь — и, знаете, я не согласен с тем, что программисту надо каждые 2-3 года менять работу, чтобы не застаиваться. Фигня все это! Чтобы не застаиваться, надо просто не застаиваться, а смена компании тут ни при чем.   В профессии я однолюб. Всегда мечтал найти такую фирму, в которой проработаю до старости, отдам ей весь свой потенциал, время и знания.   Но на собеседования ходить важно, хотя бы ради того, чтобы не зазвездиться. Около года или полутора я сходил в один банк — и упрочился во мнении, что наш фронт устарел и его надо срочно развивать, иначе мы станем нерелевантны. Отчасти благодаря этой моей вылазке у нас сейчас готовится неофронт.  Как проходил процесс адаптации? С какими трудностями вы столкнулись? Я как-то очень быстро почувствовал себя в своей тарелке. Помогал Иван, мой друг и наш бэкенд-тимлид — особенно по вопросам, связанным с бэком. Иногда бил по рукам, заставлял переписывать код, но мне такой формат работы как раз нравится. Это хоть и болезненный, но наиболее короткий способ вырасти в профессии.   Самым трудным оказалось оценивать сроки выполнения задач. Когда ты фрилансер, уметь оценивать задачи не так уж нужно: ты просто говоришь «за сегодня сделаю» и сидишь за экраном, пока не сделаешь. Поэтому и получалось, что на фрилансе я убивался по 12-13 часов почти без перерыва. Работал на износ и чуть не подорвал здоровье. Попробовал так же работать на Flowwow, но меня остановили. Дмитрий Шестернин позвонил и сказал: у нас тут не эстафета, а марафонский забег, поэтому экономь силы и трезво оценивай задачи.    Со временем я понял, насколько важно работать в комфортном темпе, но равномерно: я же не один работаю. Саппорт, маркетологи, дизайнеры завязаны на мою работу. Им тоже надо знать, когда включать свою маркетинговую магию, когда обратить внимание пользователей на другой функционал.  Какие знания у вас уже были, когда вы пришли в свою компанию? Я бы сказал, что знания мои были обширны, но не слишком глубоки. Я умел кодить на всем понемножку: и на Python, и на JavaScript, и на PHP, и на Oracle.  И до сих пор мне кажется, что моя база пока недостаточно глубока — даже в тех вещах, с которыми я систематически имею дело уже четвертый год. То есть, мне мало, чтобы просто получалось: хочется чувствовать себя в коде еще более свободно.   Например, есть у нас в команде разработчик Женя Косухин, у которого невероятно крепкая база. Когда я читаю его код, то понимаю, что мне есть куда расти.  Как вы продвигались в компании? Какие навыки в этом помогли? В Flowwow нет как таковой идеи карьерной лестницы: каждый растет над собой, растет его зарплата, но мы остаемся на одной горизонтали. Мне это безумно нравится.   Наш тимлид Тема бок о бок с нами пишет код и решает административные задачи, а мы работаем каждый над своей частью и видим, что происходит на других ветках.   В знаниях и опыте я очень продвинулся. Я в 2018 году — просто мальчик по сравнению со мной в 2022 году. Фронтенд тут ничем не отличается от других IT-сфер: ты растешь и по хард и по софт скиллам. Хард — это прежде всего качество кода и масштаб задач. Софт — это все, что относится к селф-менеджменту. Время оценки задачи, способность договариваться с командой, принимать решения. Их я отточил здесь до совершенства, и именно они позволяют мне оценивать себя как уверенного миддл+.    Ну и главный навык — ответственность и широта видения. Для меня уже совершенно естественно не проходить мимо лажи, а видеть ее и спокойно исправлять, неважно, чья она — моя или коллег.   На какую среднюю зарплату вы рассчитывали тогда и что получили? Как и писал раньше, в 2018 году на фрилансе у меня выходило около 80 тысяч в месяц, но в каторжном режиме. В Flowwow я пошел с понижением оклада — насколько помню, стартовал с 60 тысяч рублей — но я понимал, что у меня будут выходные, стабильный график, да еще и коллегой будет мой друг. Это казалось просто каким-то чудом.   Честно, я даже не думал о зарплатных ожиданиях: к тому времени я измотал себя настолько, что мне стало почти всё равно, лишь бы я мог спать по ночам.  Сейчас во фронтенде чувствую себя отлично — в том числе и по зарплате. До событий последних месяцев рынок отечественного фронтенда рос как на дрожжах, особенно после ковидных ограничений, когда весь офлайн-бизнес рванул в сеть. Рынок дико перегрет, и зарплаты на фронте стали даже выше чем у бэкенда. И думаю, это не только из-за рынка, но и потому что фронтенд «повзрослел» и его значимость для бизнеса тоже выросла за последние 10 лет.  Раз уж зашла речь о трудоустройстве — сейчас на Хабр Карьере более 250 вакансий для фронтенд-разработчиков. Фронтендеров ищут Perfect Systems, White Code, Sportmaster Lab, Gradient CSLab и много других компаний.  У Flowwow, в которой работает наш герой, тоже есть открытые вакансии, но сейчас они для бэкендеров, мобильных разработчиков и аналитиков.  Опыт Что сейчас нужно знать специалисту, чтобы попасть в вашу сферу? Если кратко — дофига всего. Вход во фронтенд и раньше был непростой, а теперь это почти нереальная задача — начать с нуля.   В целом сфера предполагает, что:   Ты уверенно знаешь хотя бы один из основных фреймворков/библиотек: Vue, React, Angular (а лучше всех их хотя бы не бояться).  Твоя база — JavaScript: без нее нельзя научиться ничему из вышеперечисленного. Плюс, тебе придется уметь аккуратно верстать на CSS, и приготовься знать определенное количество html-тэгов.   Надо уметь работать со сборщиком скриптов, понимать, что такое гитхаб и как коммитить задачи. В целом, за два месяца этому не научиться, а за полгода — гипотетически можно, если как следует погрузиться и не отвлекаться больше ни на что.   Самое главное — нельзя просто за полгода научиться и дальше кодить спокойно. Так ты просто не успеешь за отраслью, которая развивается очень быстро. Приготовься каждый год осваивать новые стеки, технологии, подходы.   В целом, сейчас вполне адекватный путь во фронтенд из бэка. Сфера достаточно окрепла, чтобы предложить привычные бэкендеру вещи: объектно-ориентированное программирование, необходимость продумывать архитектуру проекта, покрытие тестами, использование привычных паттернов.  Какие бы вы выделили важные софт- и хард-скиллы для специалиста вашего направления? Hard — описал выше: базовые фреймворки/библиотеки плюс навыки верстки. А главные soft skills — это коммуникативные навыки, способность донести до команды свое видение и аргументировать свои решения.   И еще — умение жить и развиваться на высоких скоростях. Главное отличие фронтенда от других сфер программирования — это очень короткий путь от идеи до результата. Ты видишь фактический результат своих трудов практически мгновенно: заверстал кнопку — и вот она уже видна на экране. Сделал так, чтобы данные по клику подтягивались в форму — и через неделю уже конверсия в покупку выросла. Это очень быстрая, увлекательная, даже азартная разработка.  И сообщество JavaScript тоже развивается очень быстро. Адреналиновые маньяки получают настоящий кайф в такой среде: когда каждый год нужно догонять, апгрейдить себя.  Поговорим об ошибках? Что вы сделали не так за это время, что не нужно делать новичкам? Думаю, что новичкам можно и даже иногда нужно очень много работать (не совсем так, как я на фрилансе, но все же). Если задача идет хорошо, и ты хочешь закончить, можно и посидеть над ней полночи — но тут еще надо, чтобы в команде к переработкам относились, как у нас, и отправляли трудоголиков отдыхать.   А вот чего не надо делать, так это вестись на рассказы постановщика задачи о том, что «там мелочи» и «задача ерундовая». По личному опыту, если менеджеры так говорят — значит, все с точностью до наоборот. Не пытайтесь делегировать другим оценку вашей задачи и не ведитесь, когда ее оценили за вас.   Есть еще одна характерная ошибка — искать в своей работе какой-то обозримый финал. Считать проект завершенным. Потому что во фронтенде часто бывает так: вы что-то решили, ты выполнил задачу на 90% — а потом понял, что что-то изменилось: в бизнесе, в постановке задач, в геополитике — в чем угодно. И вот тут важно не жадничать, не бояться переделать и не разрушаться от того, что ты где-то не поставил галочку насчет решенной задачки. Есть прогеры, которым такая ситуация невыносима, но я уверен, что они просто неправильно заряжены.   Укажу еще одну типичную ошибку новичка — биться над проблемой самостоятельно больше двух часов. Если ты за этот срок не смог решить проблему сам, прекрати тратить время понапрасну и иди советоваться к коллегам. Бизнесу нужны не героические усилия, а максимум результата за минимум времени.  С чего можно начать специалисту без опыта? Начинайте с hard skills, идите на хорошие курсы JavaScript и как можно скорее пробуйте делать руками то, чему вас будут учить. Конкретные курсы не посоветую: лично мне всегда гораздо больше помогало чтение первоисточника, то есть технической документации.   Если речь идёт о высшем образовании, то я считаю его очень важной составляющей успеха. В процессе получения «вышки» ты сталкиваешься со всякими умными штуками — например, у меня это были генетические алгоритмы и методы их оптимизации. Сомневаюсь, что такая информация попалась бы мне просто так.  Высшее образование повышает и общую грамотность: когда разговариваешь с человеком без образования, замечаешь разницу. И, как нам всегда говорили преподаватели, «наша задача — научить вас учиться». Навыки самостоятельного поиска и анализа информации — это бесценно. Разумеется, всему этому можно научиться и без занудных лекций и профессоров, но с ними, как мне кажется, это проще.  От автора Какие книги статьи, подкасты, курсы стоит почитать/посмотреть для развития в профессии? Мы все разные. Кого-то максимально развивают видеокурсы, кого-то — чтение документаций, а кого-то — книги. Я из тех, кто больше за документацию: серьезно, просто откройте доку по vue, она сделана как учебник. По React тоже самое.   Наш тимлид Артем — гуру по профлитературе. К его рекомендациям я всегда прислушиваюсь, поэтому вслед за ним могу порекомендовать «Мифический человеко-месяц» Фредерика Брукса и «Чистая архитектура» Роберта Мартина.   Карьерный трек фронтендера Мы часто слышим от специалистов на Хабр Карьере вопрос: как понять, что я уже сеньор? Или: что мне нужно сделать и освоить, чтобы вырасти до миддла?   Интервью с Константином — первое из серии. В каждой статье рубрики мы будем разбирать новую специализацию и показывать карьерный трек. Это инфографика с навыками, задачами и условиями работы, разбитыми по квалификациям.  Вот какой трек нам помог составить Константин и команда Flowwow.",
    "user": "6c1be9ea-b5ea-4d3a-b44e-0aa0402264a5",
    "category": 2,
    "tag": [
      26,
      30,
      31,
      17
    ]
  }
},
{
  "model": "articles.article",
  "pk": 9,
  "fields": {
    "registration_time": "2022-07-12T14:31:27Z",
    "slug": "prakticheskoe-ispolzovanie-jcstress",
    "is_active": false,
    "title": "Практическое использование JCStress",
    "body": "Приветствую, в этой статье мы рассмотрим фреймворк JCStress, созданный для тестирования многопоточного кода и применим его для решения практических задач.  Цель данной статьи — показать читателям что JCStress можно и нужно использовать не только в лабораторных работах для демонстрации эффектов связанных с моделью памяти, но и для доказательства правильности преобразований кода. Тренироваться будем на кошках JDK.  Зачин Сразу оговорюсь, что конечная целью упражнения — построение предположения и его применение для написание тестов, а не конские приросты производительности.  Почему именно JCStress? Это неудачливый брат JMH, и если последнему выпала долгая и счастливая жизнь вместе с мировым признанием, то JCStress куда менее известен и востребован. Если о JMH на момент написания статьи задано 395 вопросов, то о JCStress — лишь 7. Мне кажется, что причиной этого является либо неосведомлённость о существовании фреймворка, либо мнение о нём как об испытательном стенде, годном только для обучения и/или тестирования примитивов из java.util.concurrent.  Теперь к делу. Порядок работы такой:  возьмём код JDK, покрутим его, поищем лазейки для улучшения  построим предположение о том, как можно изменить код  напишем и запустим тест  сделаем вывод  В моей повседневной работе я чаще всего имею дело со Спрингом и прочим энтерпрайзом разной степени кровавости, поэтому наиболее интересен для меня пакет java.lang.reflect.  Например, java.lang.reflect.Parameter.isNamePresent() многократно вызывается при загрузке контекста приложения:  public boolean isNamePresent() {   return executable.hasRealParameterData() && name != null; } В свою очередь метод j.l.r.Executable.hasRealParameterData() дважды обращается к volatile-полям:  private transient volatile boolean hasRealParameterData; private transient volatile Parameter[] parameters;  boolean hasRealParameterData() {   if (parameters == null) {     privateGetParameters();   }   return hasRealParameterData; }  private Parameter[] privateGetParameters() {   Parameter[] tmp = parameters;    if (tmp == null) {      // Otherwise, go to the JVM to get them     try {       tmp = getParameters0();     } catch(IllegalArgumentException e) {       // Rethrow ClassFormatErrors       throw new MalformedParametersException(\"Invalid constant pool index\");     }      // If we get back nothing, then synthesize parameters     if (tmp == null) {       hasRealParameterData = false;       tmp = synthesizeAllParams();     } else {       hasRealParameterData = true;       verifyParameters(tmp);     }      parameters = tmp;   }   return tmp; } Обратите внимание, что метод privateGetParameters() ведёт себя как ленивый сеттер, проставляющий начальное значение двух полей (hasRealParameterData и parameters). Поставим вопрос следующим образом:  1) можно ли считать присвоение значений двум полям безопасной публикацией?  2) если публикация безопасна, то можем ли мы избавиться от одного из двух volatile?  О безопасной публикации Под безопасной публикацией здесь и далее подразумевается открытие доступа к объекту и/или его свойствам таким образом, что все доступившиеся потоки \"видят\" одно и тоже правильное состояние (состояние в данном случае - это и ссылка на объект, и все его поля). Беглый поиск по словосочетанию \"safe publication\" выдаёт несколько ссылок:  https://liyanxu.blog/2018/05/19/java-thread-safe-problems/  https://shipilev.net/blog/archive/safe-publication/  https://shipilev.net/blog/2014/safe-public-construction/#_safe_publication  https://www.youtube.com/watch?v=zMHU-nIQdwE  Большинство из них предлагает классический набор подходов:  статика  синхронизация  final поля  Все они неприменимы в нашем случае, поэтому воспользуемся менее известным (скажем так — реже встречающимся в письменных источниках) приёмом \"последний volatile\".  Отступление о первоисточниках Предположение Рассуждать будем примерно так: нужно доказать, что поведение кода под гонкой не изменится, если мы уберём volatile из объявления поля hasRealParameterData. Предположим, два потока (П1 и П2) одновременно вызывают hasReadParameterData(). Поскольку метод не синхронизирован, то оба потока исполняют его одновременно. Рассмотрим возможные исполнения:  1) П1 отработал быстрее и П2 прочитал не null из поля parameter. Что вернёт в этом случае П1? Очевидно, он вернёт то же значение, которое записал П1 в переменную hasRealParameterData, ведь если мы \"увидели\" запись не null в волатильное поле parameter, то \"увидим\" и все предшествующие ей записи.  2) Предположим, что оба прочли null, соответственно оба попадают в privateGetParameterData() и тут вновь развилка:  П{1, 2} уже записал массив в поле parameters, следовательно П{2, 1} вернёт значение уже записанное в hasRealParameterData (см. п. 1)  оба потока читают null, и единственным следствием этого будет вызов метода getParameters0(), который вернёт два разных массива (arr1 != arr2, но с тем же содержимым). Также оба потока запишут одно и то же значение в поле hasRealParameterData  Изменится ли это поведение с удалением volatile из объявления поля hasRealParameterData? На первый взгляд — нет.  Не торопитесь открывать, подумайте самостоятельно Применительно к нашему коду запись в волатильное поле parameters — это т. н. \"releasing store\", а чтение из него — \"acquiring read\". Таким образом, если мы читаем не null из поля parameters, то гарантированно \"видим\" все предшествующие записи.  Запись в поле hasRealParameterData, предшествующая записи в волатильное поле parameters, как бы защищена этой самой записью, соответственно описанные выше исполнения не меняются.  Теперь нужно доказать это строго, и в этом нам поможет JCStress.  Доказательство Вот полный код теста, пояснение ниже  @State @JCStressTest @Outcome(id = \"true\",  expect = ACCEPTABLE, desc = \"Boolean value is guarded\") @Outcome(id = \"false\", expect = FORBIDDEN, desc = \"Boolean value is not guarded\") public class ConcurrencyTest {    ConcurrencyTest.Value value = new ConcurrencyTest.Value();    @Actor   public void actor1(Z_Result r) {     r.r1 = value.method.hasRealParameterData();   }    @Actor   public void actor2(Z_Result r) {     r.r1 = value.method.hasRealParameterData();   }    static class Value {     final Executable method;      public Value() {       try {         method = getClass().getMethod(\"foo\", int.class);       } catch (NoSuchMethodException e) {         throw new RuntimeException(e);       }     }      public void foo(int parameter) {     }   } } Аннотации @State и @JCStress являются служебными. Повторяющиеся аннотации @Outcome необходимы для описания допустимых и запрещённых значений (кроме ACCEPTABLE и FORBIDDEN есть ещё ACCEPTABLE_INTERESTING и UNKNOWN; в данном случае они нас не интересуют).  Далее описано разделяемое состояние:  ConcurrencyTest.Value value = new ConcurrencyTest.Value();  static class Value {   final Executable method;    public Value() {     try {       method = getClass().getMethod(\"foo\", int.class);     } catch (NoSuchMethodException e) {       throw new RuntimeException(e);     }   }    public void foo(int parameter) {   } } Обратите внимание, что JCStress самостоятельно воссоздаёт значение поля value для каждого прогона. Иными словами, при каждом вызове одного или нескольких помеченных @Actor методов они будут работать со свежим полем.  Теперь логика:  @Actor public void actor1(Z_Result r) {   r.r1 = value.method.hasRealParameterData(); }  @Actor public void actor2(Z_Result r) {   r.r1 = value.method.hasRealParameterData(); } Здесь всё просто: методы вызываются из разных потоков создавая гонку на одном объекте. Полученный результат записывается в особый объект класса что-то_Result, похожий на хорошо знакомый по JMH Blackhole с той лишь разницей, что у \"воронки\" много перегруженных методов для \"затягивания\" разных типов данных, а типы, с которыми работает результат, определяются приставкой. В нашем случае Z_Result — это результат имеющий одно логическое поле (Z — принятое в Java обозначение типа boolean). Результату с двумя логическими полями соответствует ZZ_Result, паре boolean-int — ZI_Result и т. д. Тысячи их!  Для доказательства нашего предположения необходимо выполнить тестирование для существующего и изменённого кода. Если результаты совпадут, то код с исключённым volatile работает как прежде (читай — правильно), и корректность программы сохранена.  Теперь необходимо решить задачу по \"раскрытию\" метода Executable.hasRealParameterData() для внешнего мира. Для этого нужно сделать две вещи: очевидную и не очень.  Объявить метод публичным и добавить документацию, чтобы компилятор не ругался при сборке.  Добавить объявление метода в раздел class name java/lang/reflect/Executable файла java.base-H.sym.txt, который показывает, какие именно части стандартной библиотеки можно открывать миру.  Получается так:  class name java/lang/reflect/Executable header extends java/lang/reflect/AccessibleObject implements java/lang/reflect/Member,java/lang/reflect/GenericDeclaration sealed true flags 421 innerclass innerClass java/lang/invoke/MethodHandles$Lookup outerClass java/lang/invoke/MethodHandles innerClassName Lookup flags 19 method name hasRealParameterData descriptor ()Z flags 1 Формат несколько необычный: сперва указывается вид и имя метода, потом тип возвращаемого значения и флаг доступа.  Сборку JDK из исходников я не описываю, всё подробно изложено в документации.  Получив готовый JDK можно приступать к сборке теста. Основа для него создаётся из архетипа, как описано в README. Для сборки нужно выполнить  mvn clean package Обратите внимание, что по умолчанию компилятор Java не будет использовать в скомпилированном коде указанные в исходниках имена переменных, соответственно Executable.hasRealParameterData() всегда будет возвращать \"ложь\". Это большое неудобство, ведь данное значение совпадает со значением по умолчанию логического типа. Значит мы не можем достоверно определить, является ли прочитанное значение проставленным программой или оно таково по умолчанию. Поэтому сперва нужно сделать так, чтобы указанный метод возвращал \"истину\". Подсказали, что это можно сделать с помощью флага -parameters, в случае с мавеном это делается так:  <plugin>   <artifactId>maven-compiler-plugin</artifactId>   <version>3.8.1</version>   <configuration>     <compilerArgs>       <arg>-parameters</arg>     </compilerArgs>   </configuration> </plugin> Теперь можно запустить сам тест (выполняется из корневой папки проекта):  java -jar target/jcstress.jar -t ConcurrencyTest -v Итак, для исходного JDK с открытым Executable.hasRealParameterData() получаем:    Results across all configurations:    RESULT      SAMPLES     FREQ      EXPECT  DESCRIPTION    false            0    0,00%   Forbidden  Boolean value is not guarded     true  154?130?432  100,00%  Acceptable  Boolean value is guarded Теперь убираем лишний volatile, пересобираемся и идём на второй круг:    Results across all configurations:    RESULT      SAMPLES     FREQ      EXPECT  DESCRIPTION    false            0    0,00%   Forbidden  Boolean value is not guarged     true  187 932 672  100,00%  Acceptable  Boolean value is guarged Выводы Таким образом, мы не только теоретически обосновали возможность упрощения кода, но и подтвердили это. По ходу дела был создан запрос на слияние, код в нём пришлось немного переделать (полный отказ от volatile в пользу @Stable).  И хотя данная аннотация недоступна нам, простым смертным вне JDK, я всё же решил поделиться этим опытом, надеюсь, вы найдёте ему применение в своих проектах. Написав хотя бы простейшие тестов, вы будете гораздо глубже понимать модель памяти Java, что в свою очередь упростит её использование на практике.  Вообще строго-формальное доказательство того или иного предположения о работе многопоточного кода легко может стать адом даже для опытного разработчика, и JCStress - это именно тот инструмент, который поможет вам проверить его несложным тестом.  До новых встреч!",
    "user": "5d06f46d-0bff-43da-a85e-41d74235093f",
    "category": 2,
    "tag": [
      5
    ]
  }
}
]
